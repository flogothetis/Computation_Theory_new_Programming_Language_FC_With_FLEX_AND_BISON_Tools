Terminals unused in grammar

   KW_
   KW_OR
   RD_STR
   RD_INT
   RD_REAL
   WR_STR
   WR_INT
   WR_REAL
   KW_OROR
   NOT
   FACTOR
   RELATION


Grammar

    0 $accept: header_jobs $end

    1 programm: external_declaration
    2         | programm external_declaration

    3 header: %empty

    4 external_declaration: functions_declaration
    5                     | declarations

    6 header_jobs: header programm KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
    7            | header KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END

    8 functions_declaration: type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code KW_END
    9                      | type IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END

   10 code: instr
   11     | code instr

   12 instr: assign_cmd erotimatiko
   13      | erotimatiko
   14      | declarations
   15      | KW_RETURN expr erotimatiko
   16      | KW_CONT erotimatiko
   17      | KW_BREAK erotimatiko
   18      | KW_BEGIN ci KW_END
   19      | call_function erotimatiko
   20      | cmd

   21 cmd: if_stmt
   22    | for_stmt
   23    | while_stmt
   24    | do_stmt

   25 do_stmt: KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko

   26 while_stmt: KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions

   28 if_stmt: KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions

   30 simple_instructions: cmd
   31                    | assign_cmd erotimatiko
   32                    | erotimatiko
   33                    | declarations
   34                    | KW_RETURN expr erotimatiko
   35                    | KW_CONT erotimatiko
   36                    | KW_BREAK erotimatiko
   37                    | KW_BEGIN ci KW_END
   38                    | call_function erotimatiko

   39 ci: complex_instractions
   40   | ci complex_instractions

   41 complex_instractions: cmd
   42                     | assign_cmd erotimatiko
   43                     | KW_RETURN expr erotimatiko
   44                     | erotimatiko
   45                     | declarations
   46                     | KW_CONT erotimatiko
   47                     | KW_BREAK erotimatiko
   48                     | KW_BEGIN complex_instractions KW_END
   49                     | call_function erotimatiko

   50 call_function: IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | IDENTIFIERS OPEN_PAR CLOSE_PAR

   52 assign_cmd: IDENTIFIERS CLN EQUAL expr
   53           | type_of_values IDENTIFIERS CLN EQUAL expr
   54           | IDENTIFIERS Declare_Arrays CLN EQUAL expr

   55 function_parameters: type IDENTIFIERS
   56                    | function_parameters COMMA type IDENTIFIERS

   57 call_function_parameters: expr
   58                         | call_function_parameters COMMA IDENTIFIERS

   59 declarations: type list_var erotimatiko
   60             | KW_STATIC type list_var erotimatiko

   61 list_var: IDENTIFIERS give_value
   62         | IDENTIFIERS
   63         | list_var COMMA IDENTIFIERS give_value
   64         | list_var COMMA IDENTIFIERS
   65         | list_var COMMA IDENTIFIERS Declare_Arrays
   66         | IDENTIFIERS Declare_Arrays

   67 Declare_Arrays: OPEN_HK expr CLOSE_HK
   68               | Declare_Arrays OPEN_HK expr CLOSE_HK

   69 Declare_Arrays_expr: IDENTIFIERS Declare_Arrays

   70 give_value: CLN EQUAL type_of_values

   71 type_of_values: expr

   72 type: KW_INTEGER
   73     | KW_BOOLEAN
   74     | KW_CHAR
   75     | KW_REAL
   76     | KW_STRING
   77     | KW_VOID

   78 erotimatiko: KW_SEMICLN

   79 expr: INTEGERS
   80     | FLOATS
   81     | STRINGS
   82     | CHARACTER
   83     | IDENTIFIERS
   84     | KW_TRUE
   85     | KW_FALSE
   86     | call_function
   87     | Declare_Arrays_expr
   88     | OPEN_PAR expr CLOSE_PAR
   89     | expr KW_PLUS expr
   90     | KW_NOT expr
   91     | KW_NOTNOT expr
   92     | KW_SUB expr
   93     | KW_PLUS expr
   94     | expr KW_SUB expr
   95     | expr KW_AND expr
   96     | expr KW_MUL expr
   97     | expr KW_MOD expr
   98     | expr KW_DIV expr
   99     | expr EQUAL expr
  100     | expr KW_LESSTHAN expr
  101     | expr KW_GREATHAN expr
  102     | expr KW_LESSEQUAL expr
  103     | expr KW_GREATEREQUAL expr
  104     | expr KW_INEQ expr
  105     | expr KW_AMPERSANT expr


Terminals, with rules where they appear

$end (0) 0
error (256)
KW_TRUE (258) 84
KW_FALSE (259) 85
KW_STATIC (260) 60
KW_DO (261) 25
KW_IF (262) 28 29
KW_RETURN (263) 15 34 43
KW_BREAK (264) 17 36 47
KW_INTEGER (265) 72
KW_STRING (266) 76
KW_CONT (267) 16 35 46
KW_FOR (268) 27
KW_CHAR (269) 74
KW_VOID (270) 77
KW_ (271)
KW_REAL (272) 75
KW_WHILE (273) 25 26
KW_END (274) 6 7 8 9 18 37 48
KW_BEGIN (275) 6 7 8 9 18 37 48
KW_OR (276)
KW_SEMICLN (277) 78
COMMA (278) 56 58 63 64 65
OPEN_HK (279) 67 68
CLOSE_HK (280) 67 68
STRINGS (281) 81
CHARACTER (282) 82
IDENTIFIERS (283) 8 9 50 51 52 53 54 55 56 58 61 62 63 64 65 66 69
    83
INTEGERS (284) 79
FLOATS (285) 80
RD_STR (286)
RD_INT (287)
RD_REAL (288)
WR_STR (289)
WR_INT (290)
WR_REAL (291)
CLN (292) 52 53 54 70
KW_MAIN (293) 6 7
KW_PLUS (294) 89 93
KW_SUB (295) 92 94
KW_MUL (296) 96
KW_DIV (297) 98
KW_MOD (298) 97
KW_GREATEREQUAL (299) 103
KW_LESSEQUAL (300) 102
KW_GREATHAN (301) 101
KW_LESSTHAN (302) 100
KW_INEQ (303) 104
KW_AND (304) 95
KW_AMPERSANT (305) 105
KW_OROR (306)
KW_NOT (307) 90
KW_NOTNOT (308) 91
EQUAL (309) 52 53 54 70 99
KW_BOOLEAN (310) 73
OPEN_PAR (311) 6 7 8 9 25 26 27 28 29 50 51 88
CLOSE_PAR (312) 6 7 8 9 25 26 27 28 29 50 51 88
KW_ELSE (313) 29
"then" (314)
UMINUS (315)
UPLUS (316)
MINUS (317)
PLUS (318)
NOT (319)
FACTOR (320)
RELATION (321)
PAR_R (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
programm (69)
    on left: 1 2, on right: 2 6
header (70)
    on left: 3, on right: 6 7
external_declaration (71)
    on left: 4 5, on right: 1 2
header_jobs (72)
    on left: 6 7, on right: 0
functions_declaration (73)
    on left: 8 9, on right: 4
code (74)
    on left: 10 11, on right: 6 7 8 9 11
instr (75)
    on left: 12 13 14 15 16 17 18 19 20, on right: 10 11
cmd (76)
    on left: 21 22 23 24, on right: 20 30 41
do_stmt (77)
    on left: 25, on right: 24
while_stmt (78)
    on left: 26, on right: 23
for_stmt (79)
    on left: 27, on right: 22
if_stmt (80)
    on left: 28 29, on right: 21
simple_instructions (81)
    on left: 30 31 32 33 34 35 36 37 38, on right: 25 26 27 28 29
ci (82)
    on left: 39 40, on right: 18 37 40
complex_instractions (83)
    on left: 41 42 43 44 45 46 47 48 49, on right: 39 40 48
call_function (84)
    on left: 50 51, on right: 19 38 49 86
assign_cmd (85)
    on left: 52 53 54, on right: 12 27 31 42
function_parameters (86)
    on left: 55 56, on right: 8 56
call_function_parameters (87)
    on left: 57 58, on right: 50 58
declarations (88)
    on left: 59 60, on right: 5 14 33 45
list_var (89)
    on left: 61 62 63 64 65 66, on right: 59 60 63 64 65
Declare_Arrays (90)
    on left: 67 68, on right: 54 65 66 68 69
Declare_Arrays_expr (91)
    on left: 69, on right: 87
give_value (92)
    on left: 70, on right: 61 63
type_of_values (93)
    on left: 71, on right: 53 70
type (94)
    on left: 72 73 74 75 76 77, on right: 8 9 55 56 59 60
erotimatiko (95)
    on left: 78, on right: 12 13 15 16 17 19 25 27 31 32 34 35 36 38
    42 43 44 46 47 49 59 60
expr (96)
    on left: 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
    97 98 99 100 101 102 103 104 105, on right: 15 25 26 27 28 29 34
    43 52 53 54 57 67 68 71 88 89 90 91 92 93 94 95 96 97 98 99 100
    101 102 103 104 105


State 0

    0 $accept: . header_jobs $end
    3 header: . %empty
    6 header_jobs: . header programm KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
    7            | . header KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END

    $default  reduce using rule 3 (header)

    header       go to state 1
    header_jobs  go to state 2


State 1

    1 programm: . external_declaration
    2         | . programm external_declaration
    4 external_declaration: . functions_declaration
    5                     | . declarations
    6 header_jobs: header . programm KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
    7            | header . KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
    8 functions_declaration: . type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code KW_END
    9                      | . type IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID

    KW_STATIC   shift, and go to state 3
    KW_INTEGER  shift, and go to state 4
    KW_STRING   shift, and go to state 5
    KW_CHAR     shift, and go to state 6
    KW_VOID     shift, and go to state 7
    KW_REAL     shift, and go to state 8
    KW_MAIN     shift, and go to state 9
    KW_BOOLEAN  shift, and go to state 10

    programm               go to state 11
    external_declaration   go to state 12
    functions_declaration  go to state 13
    declarations           go to state 14
    type                   go to state 15


State 2

    0 $accept: header_jobs . $end

    $end  shift, and go to state 16


State 3

   60 declarations: KW_STATIC . type list_var erotimatiko
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID

    KW_INTEGER  shift, and go to state 4
    KW_STRING   shift, and go to state 5
    KW_CHAR     shift, and go to state 6
    KW_VOID     shift, and go to state 7
    KW_REAL     shift, and go to state 8
    KW_BOOLEAN  shift, and go to state 10

    type  go to state 17


State 4

   72 type: KW_INTEGER .

    $default  reduce using rule 72 (type)


State 5

   76 type: KW_STRING .

    $default  reduce using rule 76 (type)


State 6

   74 type: KW_CHAR .

    $default  reduce using rule 74 (type)


State 7

   77 type: KW_VOID .

    $default  reduce using rule 77 (type)


State 8

   75 type: KW_REAL .

    $default  reduce using rule 75 (type)


State 9

    7 header_jobs: header KW_MAIN . OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END

    OPEN_PAR  shift, and go to state 18


State 10

   73 type: KW_BOOLEAN .

    $default  reduce using rule 73 (type)


State 11

    2 programm: programm . external_declaration
    4 external_declaration: . functions_declaration
    5                     | . declarations
    6 header_jobs: header programm . KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
    8 functions_declaration: . type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code KW_END
    9                      | . type IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID

    KW_STATIC   shift, and go to state 3
    KW_INTEGER  shift, and go to state 4
    KW_STRING   shift, and go to state 5
    KW_CHAR     shift, and go to state 6
    KW_VOID     shift, and go to state 7
    KW_REAL     shift, and go to state 8
    KW_MAIN     shift, and go to state 19
    KW_BOOLEAN  shift, and go to state 10

    external_declaration   go to state 20
    functions_declaration  go to state 13
    declarations           go to state 14
    type                   go to state 15


State 12

    1 programm: external_declaration .

    $default  reduce using rule 1 (programm)


State 13

    4 external_declaration: functions_declaration .

    $default  reduce using rule 4 (external_declaration)


State 14

    5 external_declaration: declarations .

    $default  reduce using rule 5 (external_declaration)


State 15

    8 functions_declaration: type . IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code KW_END
    9                      | type . IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
   59 declarations: type . list_var erotimatiko
   61 list_var: . IDENTIFIERS give_value
   62         | . IDENTIFIERS
   63         | . list_var COMMA IDENTIFIERS give_value
   64         | . list_var COMMA IDENTIFIERS
   65         | . list_var COMMA IDENTIFIERS Declare_Arrays
   66         | . IDENTIFIERS Declare_Arrays

    IDENTIFIERS  shift, and go to state 21

    list_var  go to state 22


State 16

    0 $accept: header_jobs $end .

    $default  accept


State 17

   60 declarations: KW_STATIC type . list_var erotimatiko
   61 list_var: . IDENTIFIERS give_value
   62         | . IDENTIFIERS
   63         | . list_var COMMA IDENTIFIERS give_value
   64         | . list_var COMMA IDENTIFIERS
   65         | . list_var COMMA IDENTIFIERS Declare_Arrays
   66         | . IDENTIFIERS Declare_Arrays

    IDENTIFIERS  shift, and go to state 23

    list_var  go to state 24


State 18

    7 header_jobs: header KW_MAIN OPEN_PAR . CLOSE_PAR KW_BEGIN code KW_END

    CLOSE_PAR  shift, and go to state 25


State 19

    6 header_jobs: header programm KW_MAIN . OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END

    OPEN_PAR  shift, and go to state 26


State 20

    2 programm: programm external_declaration .

    $default  reduce using rule 2 (programm)


State 21

    8 functions_declaration: type IDENTIFIERS . OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code KW_END
    9                      | type IDENTIFIERS . OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END
   61 list_var: IDENTIFIERS . give_value
   62         | IDENTIFIERS .  [KW_SEMICLN, COMMA]
   66         | IDENTIFIERS . Declare_Arrays
   67 Declare_Arrays: . OPEN_HK expr CLOSE_HK
   68               | . Declare_Arrays OPEN_HK expr CLOSE_HK
   70 give_value: . CLN EQUAL type_of_values

    OPEN_HK   shift, and go to state 27
    CLN       shift, and go to state 28
    OPEN_PAR  shift, and go to state 29

    $default  reduce using rule 62 (list_var)

    Declare_Arrays  go to state 30
    give_value      go to state 31


State 22

   59 declarations: type list_var . erotimatiko
   63 list_var: list_var . COMMA IDENTIFIERS give_value
   64         | list_var . COMMA IDENTIFIERS
   65         | list_var . COMMA IDENTIFIERS Declare_Arrays
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32
    COMMA       shift, and go to state 33

    erotimatiko  go to state 34


State 23

   61 list_var: IDENTIFIERS . give_value
   62         | IDENTIFIERS .  [KW_SEMICLN, COMMA]
   66         | IDENTIFIERS . Declare_Arrays
   67 Declare_Arrays: . OPEN_HK expr CLOSE_HK
   68               | . Declare_Arrays OPEN_HK expr CLOSE_HK
   70 give_value: . CLN EQUAL type_of_values

    OPEN_HK  shift, and go to state 27
    CLN      shift, and go to state 28

    $default  reduce using rule 62 (list_var)

    Declare_Arrays  go to state 30
    give_value      go to state 31


State 24

   60 declarations: KW_STATIC type list_var . erotimatiko
   63 list_var: list_var . COMMA IDENTIFIERS give_value
   64         | list_var . COMMA IDENTIFIERS
   65         | list_var . COMMA IDENTIFIERS Declare_Arrays
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32
    COMMA       shift, and go to state 33

    erotimatiko  go to state 35


State 25

    7 header_jobs: header KW_MAIN OPEN_PAR CLOSE_PAR . KW_BEGIN code KW_END

    KW_BEGIN  shift, and go to state 36


State 26

    6 header_jobs: header programm KW_MAIN OPEN_PAR . CLOSE_PAR KW_BEGIN code KW_END

    CLOSE_PAR  shift, and go to state 37


State 27

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   67 Declare_Arrays: OPEN_HK . expr CLOSE_HK
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 52


State 28

   70 give_value: CLN . EQUAL type_of_values

    EQUAL  shift, and go to state 53


State 29

    8 functions_declaration: type IDENTIFIERS OPEN_PAR . function_parameters CLOSE_PAR KW_BEGIN code KW_END
    9                      | type IDENTIFIERS OPEN_PAR . CLOSE_PAR KW_BEGIN code KW_END
   55 function_parameters: . type IDENTIFIERS
   56                    | . function_parameters COMMA type IDENTIFIERS
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID

    KW_INTEGER  shift, and go to state 4
    KW_STRING   shift, and go to state 5
    KW_CHAR     shift, and go to state 6
    KW_VOID     shift, and go to state 7
    KW_REAL     shift, and go to state 8
    KW_BOOLEAN  shift, and go to state 10
    CLOSE_PAR   shift, and go to state 54

    function_parameters  go to state 55
    type                 go to state 56


State 30

   66 list_var: IDENTIFIERS Declare_Arrays .  [KW_SEMICLN, COMMA]
   68 Declare_Arrays: Declare_Arrays . OPEN_HK expr CLOSE_HK

    OPEN_HK  shift, and go to state 57

    $default  reduce using rule 66 (list_var)


State 31

   61 list_var: IDENTIFIERS give_value .

    $default  reduce using rule 61 (list_var)


State 32

   78 erotimatiko: KW_SEMICLN .

    $default  reduce using rule 78 (erotimatiko)


State 33

   63 list_var: list_var COMMA . IDENTIFIERS give_value
   64         | list_var COMMA . IDENTIFIERS
   65         | list_var COMMA . IDENTIFIERS Declare_Arrays

    IDENTIFIERS  shift, and go to state 58


State 34

   59 declarations: type list_var erotimatiko .

    $default  reduce using rule 59 (declarations)


State 35

   60 declarations: KW_STATIC type list_var erotimatiko .

    $default  reduce using rule 60 (declarations)


State 36

    7 header_jobs: header KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN . code KW_END
   10 code: . instr
   11     | . code instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    code                 go to state 68
    instr                go to state 69
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 37

    6 header_jobs: header programm KW_MAIN OPEN_PAR CLOSE_PAR . KW_BEGIN code KW_END

    KW_BEGIN  shift, and go to state 82


State 38

   84 expr: KW_TRUE .

    $default  reduce using rule 84 (expr)


State 39

   85 expr: KW_FALSE .

    $default  reduce using rule 85 (expr)


State 40

   81 expr: STRINGS .

    $default  reduce using rule 81 (expr)


State 41

   82 expr: CHARACTER .

    $default  reduce using rule 82 (expr)


State 42

   50 call_function: IDENTIFIERS . OPEN_PAR call_function_parameters CLOSE_PAR
   51              | IDENTIFIERS . OPEN_PAR CLOSE_PAR
   67 Declare_Arrays: . OPEN_HK expr CLOSE_HK
   68               | . Declare_Arrays OPEN_HK expr CLOSE_HK
   69 Declare_Arrays_expr: IDENTIFIERS . Declare_Arrays
   83 expr: IDENTIFIERS .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]

    OPEN_HK   shift, and go to state 27
    OPEN_PAR  shift, and go to state 83

    $default  reduce using rule 83 (expr)

    Declare_Arrays  go to state 84


State 43

   79 expr: INTEGERS .

    $default  reduce using rule 79 (expr)


State 44

   80 expr: FLOATS .

    $default  reduce using rule 80 (expr)


State 45

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   93     | KW_PLUS . expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 85


State 46

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   92     | KW_SUB . expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 86


State 47

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   90     | KW_NOT . expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 87


State 48

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   91     | KW_NOTNOT . expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 88


State 49

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   88     | OPEN_PAR . expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 89


State 50

   86 expr: call_function .

    $default  reduce using rule 86 (expr)


State 51

   87 expr: Declare_Arrays_expr .

    $default  reduce using rule 87 (expr)


State 52

   67 Declare_Arrays: OPEN_HK expr . CLOSE_HK
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    CLOSE_HK         shift, and go to state 90
    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103


State 53

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   70 give_value: CLN EQUAL . type_of_values
   71 type_of_values: . expr
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 104
    expr                 go to state 81


State 54

    9 functions_declaration: type IDENTIFIERS OPEN_PAR CLOSE_PAR . KW_BEGIN code KW_END

    KW_BEGIN  shift, and go to state 105


State 55

    8 functions_declaration: type IDENTIFIERS OPEN_PAR function_parameters . CLOSE_PAR KW_BEGIN code KW_END
   56 function_parameters: function_parameters . COMMA type IDENTIFIERS

    COMMA      shift, and go to state 106
    CLOSE_PAR  shift, and go to state 107


State 56

   55 function_parameters: type . IDENTIFIERS

    IDENTIFIERS  shift, and go to state 108


State 57

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   68 Declare_Arrays: Declare_Arrays OPEN_HK . expr CLOSE_HK
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 109


State 58

   63 list_var: list_var COMMA IDENTIFIERS . give_value
   64         | list_var COMMA IDENTIFIERS .  [KW_SEMICLN, COMMA]
   65         | list_var COMMA IDENTIFIERS . Declare_Arrays
   67 Declare_Arrays: . OPEN_HK expr CLOSE_HK
   68               | . Declare_Arrays OPEN_HK expr CLOSE_HK
   70 give_value: . CLN EQUAL type_of_values

    OPEN_HK  shift, and go to state 27
    CLN      shift, and go to state 28

    $default  reduce using rule 64 (list_var)

    Declare_Arrays  go to state 110
    give_value      go to state 111


State 59

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   25        | KW_DO . simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   30 simple_instructions: . cmd
   31                    | . assign_cmd erotimatiko
   32                    | . erotimatiko
   33                    | . declarations
   34                    | . KW_RETURN expr erotimatiko
   35                    | . KW_CONT erotimatiko
   36                    | . KW_BREAK erotimatiko
   37                    | . KW_BEGIN ci KW_END
   38                    | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 112
    KW_BREAK     shift, and go to state 113
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 114
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 115
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                  go to state 116
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    simple_instructions  go to state 117
    call_function        go to state 118
    assign_cmd           go to state 119
    declarations         go to state 120
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 121
    expr                 go to state 81


State 60

   28 if_stmt: KW_IF . OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | KW_IF . OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions

    OPEN_PAR  shift, and go to state 122


State 61

   15 instr: KW_RETURN . expr erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 123


State 62

   17 instr: KW_BREAK . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 124


State 63

   16 instr: KW_CONT . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 125


State 64

   27 for_stmt: KW_FOR . OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions

    OPEN_PAR  shift, and go to state 126


State 65

   26 while_stmt: KW_WHILE . OPEN_PAR expr CLOSE_PAR simple_instructions

    OPEN_PAR  shift, and go to state 127


State 66

   18 instr: KW_BEGIN . ci KW_END
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   39 ci: . complex_instractions
   40   | . ci complex_instractions
   41 complex_instractions: . cmd
   42                     | . assign_cmd erotimatiko
   43                     | . KW_RETURN expr erotimatiko
   44                     | . erotimatiko
   45                     | . declarations
   46                     | . KW_CONT erotimatiko
   47                     | . KW_BREAK erotimatiko
   48                     | . KW_BEGIN complex_instractions KW_END
   49                     | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 130
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 131
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                   go to state 132
    do_stmt               go to state 71
    while_stmt            go to state 72
    for_stmt              go to state 73
    if_stmt               go to state 74
    ci                    go to state 133
    complex_instractions  go to state 134
    call_function         go to state 135
    assign_cmd            go to state 136
    declarations          go to state 137
    Declare_Arrays_expr   go to state 51
    type_of_values        go to state 78
    type                  go to state 79
    erotimatiko           go to state 138
    expr                  go to state 81


State 67

   50 call_function: IDENTIFIERS . OPEN_PAR call_function_parameters CLOSE_PAR
   51              | IDENTIFIERS . OPEN_PAR CLOSE_PAR
   52 assign_cmd: IDENTIFIERS . CLN EQUAL expr
   54           | IDENTIFIERS . Declare_Arrays CLN EQUAL expr
   67 Declare_Arrays: . OPEN_HK expr CLOSE_HK
   68               | . Declare_Arrays OPEN_HK expr CLOSE_HK
   69 Declare_Arrays_expr: IDENTIFIERS . Declare_Arrays
   83 expr: IDENTIFIERS .  [IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL]

    OPEN_HK   shift, and go to state 27
    CLN       shift, and go to state 139
    OPEN_PAR  shift, and go to state 83

    $default  reduce using rule 83 (expr)

    Declare_Arrays  go to state 140


State 68

    7 header_jobs: header KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code . KW_END
   11 code: code . instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_END       shift, and go to state 141
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    instr                go to state 142
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 69

   10 code: instr .

    $default  reduce using rule 10 (code)


State 70

   20 instr: cmd .

    $default  reduce using rule 20 (instr)


State 71

   24 cmd: do_stmt .

    $default  reduce using rule 24 (cmd)


State 72

   23 cmd: while_stmt .

    $default  reduce using rule 23 (cmd)


State 73

   22 cmd: for_stmt .

    $default  reduce using rule 22 (cmd)


State 74

   21 cmd: if_stmt .

    $default  reduce using rule 21 (cmd)


State 75

   19 instr: call_function . erotimatiko
   78 erotimatiko: . KW_SEMICLN
   86 expr: call_function .  [IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL]

    KW_SEMICLN  shift, and go to state 32

    $default  reduce using rule 86 (expr)

    erotimatiko  go to state 143


State 76

   12 instr: assign_cmd . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 144


State 77

   14 instr: declarations .

    $default  reduce using rule 14 (instr)


State 78

   53 assign_cmd: type_of_values . IDENTIFIERS CLN EQUAL expr

    IDENTIFIERS  shift, and go to state 145


State 79

   59 declarations: type . list_var erotimatiko
   61 list_var: . IDENTIFIERS give_value
   62         | . IDENTIFIERS
   63         | . list_var COMMA IDENTIFIERS give_value
   64         | . list_var COMMA IDENTIFIERS
   65         | . list_var COMMA IDENTIFIERS Declare_Arrays
   66         | . IDENTIFIERS Declare_Arrays

    IDENTIFIERS  shift, and go to state 23

    list_var  go to state 22


State 80

   13 instr: erotimatiko .

    $default  reduce using rule 13 (instr)


State 81

   71 type_of_values: expr .  [KW_SEMICLN, COMMA, IDENTIFIERS]
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 71 (type_of_values)


State 82

    6 header_jobs: header programm KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN . code KW_END
   10 code: . instr
   11     | . code instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    code                 go to state 146
    instr                go to state 69
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 83

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   50              | IDENTIFIERS OPEN_PAR . call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   51              | IDENTIFIERS OPEN_PAR . CLOSE_PAR
   57 call_function_parameters: . expr
   58                         | . call_function_parameters COMMA IDENTIFIERS
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49
    CLOSE_PAR    shift, and go to state 147

    call_function             go to state 50
    call_function_parameters  go to state 148
    Declare_Arrays_expr       go to state 51
    expr                      go to state 149


State 84

   68 Declare_Arrays: Declare_Arrays . OPEN_HK expr CLOSE_HK
   69 Declare_Arrays_expr: IDENTIFIERS Declare_Arrays .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]

    OPEN_HK  shift, and go to state 57

    $default  reduce using rule 69 (Declare_Arrays_expr)


State 85

   89 expr: expr . KW_PLUS expr
   93     | KW_PLUS expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    $default  reduce using rule 93 (expr)

    Conflict between rule 93 and token KW_PLUS resolved as reduce (KW_PLUS < UPLUS).
    Conflict between rule 93 and token KW_SUB resolved as reduce (KW_SUB < UPLUS).
    Conflict between rule 93 and token KW_MUL resolved as reduce (KW_MUL < UPLUS).
    Conflict between rule 93 and token KW_DIV resolved as reduce (KW_DIV < UPLUS).
    Conflict between rule 93 and token KW_MOD resolved as reduce (KW_MOD < UPLUS).
    Conflict between rule 93 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < UPLUS).
    Conflict between rule 93 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < UPLUS).
    Conflict between rule 93 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < UPLUS).
    Conflict between rule 93 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < UPLUS).
    Conflict between rule 93 and token KW_INEQ resolved as reduce (KW_INEQ < UPLUS).
    Conflict between rule 93 and token KW_AND resolved as reduce (KW_AND < UPLUS).
    Conflict between rule 93 and token KW_AMPERSANT resolved as reduce (KW_AMPERSANT < UPLUS).
    Conflict between rule 93 and token EQUAL resolved as reduce (EQUAL < UPLUS).


State 86

   89 expr: expr . KW_PLUS expr
   92     | KW_SUB expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, CLOSE_PAR]
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 92 (expr)

    Conflict between rule 92 and token KW_PLUS resolved as reduce (KW_PLUS < KW_SUB).
    Conflict between rule 92 and token KW_SUB resolved as shift (%right KW_SUB).
    Conflict between rule 92 and token KW_MUL resolved as shift (KW_SUB < KW_MUL).
    Conflict between rule 92 and token KW_DIV resolved as shift (KW_SUB < KW_DIV).
    Conflict between rule 92 and token KW_MOD resolved as shift (KW_SUB < KW_MOD).
    Conflict between rule 92 and token KW_GREATEREQUAL resolved as shift (KW_SUB < KW_GREATEREQUAL).
    Conflict between rule 92 and token KW_LESSEQUAL resolved as shift (KW_SUB < KW_LESSEQUAL).
    Conflict between rule 92 and token KW_GREATHAN resolved as shift (KW_SUB < KW_GREATHAN).
    Conflict between rule 92 and token KW_LESSTHAN resolved as shift (KW_SUB < KW_LESSTHAN).
    Conflict between rule 92 and token KW_INEQ resolved as shift (KW_SUB < KW_INEQ).
    Conflict between rule 92 and token KW_AND resolved as shift (KW_SUB < KW_AND).
    Conflict between rule 92 and token KW_AMPERSANT resolved as shift (KW_SUB < KW_AMPERSANT).
    Conflict between rule 92 and token EQUAL resolved as shift (KW_SUB < EQUAL).


State 87

   89 expr: expr . KW_PLUS expr
   90     | KW_NOT expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, CLOSE_PAR]
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    EQUAL  shift, and go to state 103

    $default  reduce using rule 90 (expr)

    Conflict between rule 90 and token KW_PLUS resolved as reduce (KW_PLUS < KW_NOT).
    Conflict between rule 90 and token KW_SUB resolved as reduce (KW_SUB < KW_NOT).
    Conflict between rule 90 and token KW_MUL resolved as reduce (KW_MUL < KW_NOT).
    Conflict between rule 90 and token KW_DIV resolved as reduce (KW_DIV < KW_NOT).
    Conflict between rule 90 and token KW_MOD resolved as reduce (KW_MOD < KW_NOT).
    Conflict between rule 90 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_NOT).
    Conflict between rule 90 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < KW_NOT).
    Conflict between rule 90 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < KW_NOT).
    Conflict between rule 90 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < KW_NOT).
    Conflict between rule 90 and token KW_INEQ resolved as reduce (KW_INEQ < KW_NOT).
    Conflict between rule 90 and token KW_AND resolved as reduce (KW_AND < KW_NOT).
    Conflict between rule 90 and token KW_AMPERSANT resolved as reduce (KW_AMPERSANT < KW_NOT).
    Conflict between rule 90 and token EQUAL resolved as shift (KW_NOT < EQUAL).


State 88

   89 expr: expr . KW_PLUS expr
   91     | KW_NOTNOT expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    $default  reduce using rule 91 (expr)

    Conflict between rule 91 and token KW_PLUS resolved as reduce (KW_PLUS < UMINUS).
    Conflict between rule 91 and token KW_SUB resolved as reduce (KW_SUB < UMINUS).
    Conflict between rule 91 and token KW_MUL resolved as reduce (KW_MUL < UMINUS).
    Conflict between rule 91 and token KW_DIV resolved as reduce (KW_DIV < UMINUS).
    Conflict between rule 91 and token KW_MOD resolved as reduce (KW_MOD < UMINUS).
    Conflict between rule 91 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < UMINUS).
    Conflict between rule 91 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < UMINUS).
    Conflict between rule 91 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < UMINUS).
    Conflict between rule 91 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < UMINUS).
    Conflict between rule 91 and token KW_INEQ resolved as reduce (KW_INEQ < UMINUS).
    Conflict between rule 91 and token KW_AND resolved as reduce (KW_AND < UMINUS).
    Conflict between rule 91 and token KW_AMPERSANT resolved as reduce (KW_AMPERSANT < UMINUS).
    Conflict between rule 91 and token EQUAL resolved as reduce (EQUAL < UMINUS).


State 89

   88 expr: OPEN_PAR expr . CLOSE_PAR
   89     | expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103
    CLOSE_PAR        shift, and go to state 150


State 90

   67 Declare_Arrays: OPEN_HK expr CLOSE_HK .

    $default  reduce using rule 67 (Declare_Arrays)


State 91

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   89     | expr KW_PLUS . expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 151


State 92

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   94     | expr KW_SUB . expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 152


State 93

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   96     | expr KW_MUL . expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 153


State 94

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   98     | expr KW_DIV . expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 154


State 95

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   97     | expr KW_MOD . expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 155


State 96

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  103     | expr KW_GREATEREQUAL . expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 156


State 97

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  102     | expr KW_LESSEQUAL . expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 157


State 98

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  101     | expr KW_GREATHAN . expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 158


State 99

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  100     | expr KW_LESSTHAN . expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 159


State 100

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  104     | expr KW_INEQ . expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 160


State 101

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   95     | expr KW_AND . expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 161


State 102

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr
  105     | expr KW_AMPERSANT . expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 162


State 103

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
   99     | expr EQUAL . expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 163


State 104

   70 give_value: CLN EQUAL type_of_values .

    $default  reduce using rule 70 (give_value)


State 105

    9 functions_declaration: type IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN . code KW_END
   10 code: . instr
   11     | . code instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    code                 go to state 164
    instr                go to state 69
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 106

   56 function_parameters: function_parameters COMMA . type IDENTIFIERS
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID

    KW_INTEGER  shift, and go to state 4
    KW_STRING   shift, and go to state 5
    KW_CHAR     shift, and go to state 6
    KW_VOID     shift, and go to state 7
    KW_REAL     shift, and go to state 8
    KW_BOOLEAN  shift, and go to state 10

    type  go to state 165


State 107

    8 functions_declaration: type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR . KW_BEGIN code KW_END

    KW_BEGIN  shift, and go to state 166


State 108

   55 function_parameters: type IDENTIFIERS .

    $default  reduce using rule 55 (function_parameters)


State 109

   68 Declare_Arrays: Declare_Arrays OPEN_HK expr . CLOSE_HK
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    CLOSE_HK         shift, and go to state 167
    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103


State 110

   65 list_var: list_var COMMA IDENTIFIERS Declare_Arrays .  [KW_SEMICLN, COMMA]
   68 Declare_Arrays: Declare_Arrays . OPEN_HK expr CLOSE_HK

    OPEN_HK  shift, and go to state 57

    $default  reduce using rule 65 (list_var)


State 111

   63 list_var: list_var COMMA IDENTIFIERS give_value .

    $default  reduce using rule 63 (list_var)


State 112

   34 simple_instructions: KW_RETURN . expr erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 168


State 113

   36 simple_instructions: KW_BREAK . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 169


State 114

   35 simple_instructions: KW_CONT . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 170


State 115

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   37 simple_instructions: KW_BEGIN . ci KW_END
   39 ci: . complex_instractions
   40   | . ci complex_instractions
   41 complex_instractions: . cmd
   42                     | . assign_cmd erotimatiko
   43                     | . KW_RETURN expr erotimatiko
   44                     | . erotimatiko
   45                     | . declarations
   46                     | . KW_CONT erotimatiko
   47                     | . KW_BREAK erotimatiko
   48                     | . KW_BEGIN complex_instractions KW_END
   49                     | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 130
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 131
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                   go to state 132
    do_stmt               go to state 71
    while_stmt            go to state 72
    for_stmt              go to state 73
    if_stmt               go to state 74
    ci                    go to state 171
    complex_instractions  go to state 134
    call_function         go to state 135
    assign_cmd            go to state 136
    declarations          go to state 137
    Declare_Arrays_expr   go to state 51
    type_of_values        go to state 78
    type                  go to state 79
    erotimatiko           go to state 138
    expr                  go to state 81


State 116

   30 simple_instructions: cmd .

    $default  reduce using rule 30 (simple_instructions)


State 117

   25 do_stmt: KW_DO simple_instructions . KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko

    KW_WHILE  shift, and go to state 172


State 118

   38 simple_instructions: call_function . erotimatiko
   78 erotimatiko: . KW_SEMICLN
   86 expr: call_function .  [IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL]

    KW_SEMICLN  shift, and go to state 32

    $default  reduce using rule 86 (expr)

    erotimatiko  go to state 173


State 119

   31 simple_instructions: assign_cmd . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 174


State 120

   33 simple_instructions: declarations .

    $default  reduce using rule 33 (simple_instructions)


State 121

   32 simple_instructions: erotimatiko .

    $default  reduce using rule 32 (simple_instructions)


State 122

   28 if_stmt: KW_IF OPEN_PAR . expr CLOSE_PAR simple_instructions
   29        | KW_IF OPEN_PAR . expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 175


State 123

   15 instr: KW_RETURN expr . erotimatiko
   78 erotimatiko: . KW_SEMICLN
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_SEMICLN       shift, and go to state 32
    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    erotimatiko  go to state 176


State 124

   17 instr: KW_BREAK erotimatiko .

    $default  reduce using rule 17 (instr)


State 125

   16 instr: KW_CONT erotimatiko .

    $default  reduce using rule 16 (instr)


State 126

   27 for_stmt: KW_FOR OPEN_PAR . assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    assign_cmd           go to state 177
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    expr                 go to state 81


State 127

   26 while_stmt: KW_WHILE OPEN_PAR . expr CLOSE_PAR simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 178


State 128

   43 complex_instractions: KW_RETURN . expr erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 179


State 129

   47 complex_instractions: KW_BREAK . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 180


State 130

   46 complex_instractions: KW_CONT . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 181


State 131

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   41 complex_instractions: . cmd
   42                     | . assign_cmd erotimatiko
   43                     | . KW_RETURN expr erotimatiko
   44                     | . erotimatiko
   45                     | . declarations
   46                     | . KW_CONT erotimatiko
   47                     | . KW_BREAK erotimatiko
   48                     | . KW_BEGIN complex_instractions KW_END
   48                     | KW_BEGIN . complex_instractions KW_END
   49                     | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 130
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 131
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                   go to state 132
    do_stmt               go to state 71
    while_stmt            go to state 72
    for_stmt              go to state 73
    if_stmt               go to state 74
    complex_instractions  go to state 182
    call_function         go to state 135
    assign_cmd            go to state 136
    declarations          go to state 137
    Declare_Arrays_expr   go to state 51
    type_of_values        go to state 78
    type                  go to state 79
    erotimatiko           go to state 138
    expr                  go to state 81


State 132

   41 complex_instractions: cmd .

    $default  reduce using rule 41 (complex_instractions)


State 133

   18 instr: KW_BEGIN ci . KW_END
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   40 ci: ci . complex_instractions
   41 complex_instractions: . cmd
   42                     | . assign_cmd erotimatiko
   43                     | . KW_RETURN expr erotimatiko
   44                     | . erotimatiko
   45                     | . declarations
   46                     | . KW_CONT erotimatiko
   47                     | . KW_BREAK erotimatiko
   48                     | . KW_BEGIN complex_instractions KW_END
   49                     | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 130
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_END       shift, and go to state 183
    KW_BEGIN     shift, and go to state 131
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                   go to state 132
    do_stmt               go to state 71
    while_stmt            go to state 72
    for_stmt              go to state 73
    if_stmt               go to state 74
    complex_instractions  go to state 184
    call_function         go to state 135
    assign_cmd            go to state 136
    declarations          go to state 137
    Declare_Arrays_expr   go to state 51
    type_of_values        go to state 78
    type                  go to state 79
    erotimatiko           go to state 138
    expr                  go to state 81


State 134

   39 ci: complex_instractions .

    $default  reduce using rule 39 (ci)


State 135

   49 complex_instractions: call_function . erotimatiko
   78 erotimatiko: . KW_SEMICLN
   86 expr: call_function .  [IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL]

    KW_SEMICLN  shift, and go to state 32

    $default  reduce using rule 86 (expr)

    erotimatiko  go to state 185


State 136

   42 complex_instractions: assign_cmd . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 186


State 137

   45 complex_instractions: declarations .

    $default  reduce using rule 45 (complex_instractions)


State 138

   44 complex_instractions: erotimatiko .

    $default  reduce using rule 44 (complex_instractions)


State 139

   52 assign_cmd: IDENTIFIERS CLN . EQUAL expr

    EQUAL  shift, and go to state 187


State 140

   54 assign_cmd: IDENTIFIERS Declare_Arrays . CLN EQUAL expr
   68 Declare_Arrays: Declare_Arrays . OPEN_HK expr CLOSE_HK
   69 Declare_Arrays_expr: IDENTIFIERS Declare_Arrays .  [IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL]

    OPEN_HK  shift, and go to state 57
    CLN      shift, and go to state 188

    $default  reduce using rule 69 (Declare_Arrays_expr)


State 141

    7 header_jobs: header KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END .

    $default  reduce using rule 7 (header_jobs)


State 142

   11 code: code instr .

    $default  reduce using rule 11 (code)


State 143

   19 instr: call_function erotimatiko .

    $default  reduce using rule 19 (instr)


State 144

   12 instr: assign_cmd erotimatiko .

    $default  reduce using rule 12 (instr)


State 145

   53 assign_cmd: type_of_values IDENTIFIERS . CLN EQUAL expr

    CLN  shift, and go to state 189


State 146

    6 header_jobs: header programm KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code . KW_END
   11 code: code . instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_END       shift, and go to state 190
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    instr                go to state 142
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 147

   51 call_function: IDENTIFIERS OPEN_PAR CLOSE_PAR .

    $default  reduce using rule 51 (call_function)


State 148

   50 call_function: IDENTIFIERS OPEN_PAR call_function_parameters . CLOSE_PAR
   58 call_function_parameters: call_function_parameters . COMMA IDENTIFIERS

    COMMA      shift, and go to state 191
    CLOSE_PAR  shift, and go to state 192


State 149

   57 call_function_parameters: expr .  [COMMA, CLOSE_PAR]
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 57 (call_function_parameters)


State 150

   88 expr: OPEN_PAR expr CLOSE_PAR .

    $default  reduce using rule 88 (expr)


State 151

   89 expr: expr . KW_PLUS expr
   89     | expr KW_PLUS expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    $default  reduce using rule 89 (expr)

    Conflict between rule 89 and token KW_PLUS resolved as reduce (KW_PLUS < PLUS).
    Conflict between rule 89 and token KW_SUB resolved as reduce (KW_SUB < PLUS).
    Conflict between rule 89 and token KW_MUL resolved as reduce (KW_MUL < PLUS).
    Conflict between rule 89 and token KW_DIV resolved as reduce (KW_DIV < PLUS).
    Conflict between rule 89 and token KW_MOD resolved as reduce (KW_MOD < PLUS).
    Conflict between rule 89 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < PLUS).
    Conflict between rule 89 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < PLUS).
    Conflict between rule 89 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < PLUS).
    Conflict between rule 89 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < PLUS).
    Conflict between rule 89 and token KW_INEQ resolved as reduce (KW_INEQ < PLUS).
    Conflict between rule 89 and token KW_AND resolved as reduce (KW_AND < PLUS).
    Conflict between rule 89 and token KW_AMPERSANT resolved as reduce (KW_AMPERSANT < PLUS).
    Conflict between rule 89 and token EQUAL resolved as reduce (EQUAL < PLUS).


State 152

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   94     | expr KW_SUB expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    $default  reduce using rule 94 (expr)

    Conflict between rule 94 and token KW_PLUS resolved as reduce (KW_PLUS < MINUS).
    Conflict between rule 94 and token KW_SUB resolved as reduce (KW_SUB < MINUS).
    Conflict between rule 94 and token KW_MUL resolved as reduce (KW_MUL < MINUS).
    Conflict between rule 94 and token KW_DIV resolved as reduce (KW_DIV < MINUS).
    Conflict between rule 94 and token KW_MOD resolved as reduce (KW_MOD < MINUS).
    Conflict between rule 94 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < MINUS).
    Conflict between rule 94 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < MINUS).
    Conflict between rule 94 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < MINUS).
    Conflict between rule 94 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < MINUS).
    Conflict between rule 94 and token KW_INEQ resolved as reduce (KW_INEQ < MINUS).
    Conflict between rule 94 and token KW_AND resolved as reduce (KW_AND < MINUS).
    Conflict between rule 94 and token KW_AMPERSANT resolved as reduce (KW_AMPERSANT < MINUS).
    Conflict between rule 94 and token EQUAL resolved as reduce (EQUAL < MINUS).


State 153

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   96     | expr KW_MUL expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, CLOSE_PAR]
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 96 (expr)

    Conflict between rule 96 and token KW_PLUS resolved as reduce (KW_PLUS < KW_MUL).
    Conflict between rule 96 and token KW_SUB resolved as reduce (KW_SUB < KW_MUL).
    Conflict between rule 96 and token KW_MUL resolved as reduce (%left KW_MUL).
    Conflict between rule 96 and token KW_DIV resolved as shift (KW_MUL < KW_DIV).
    Conflict between rule 96 and token KW_MOD resolved as shift (KW_MUL < KW_MOD).
    Conflict between rule 96 and token KW_GREATEREQUAL resolved as shift (KW_MUL < KW_GREATEREQUAL).
    Conflict between rule 96 and token KW_LESSEQUAL resolved as shift (KW_MUL < KW_LESSEQUAL).
    Conflict between rule 96 and token KW_GREATHAN resolved as shift (KW_MUL < KW_GREATHAN).
    Conflict between rule 96 and token KW_LESSTHAN resolved as shift (KW_MUL < KW_LESSTHAN).
    Conflict between rule 96 and token KW_INEQ resolved as shift (KW_MUL < KW_INEQ).
    Conflict between rule 96 and token KW_AND resolved as shift (KW_MUL < KW_AND).
    Conflict between rule 96 and token KW_AMPERSANT resolved as shift (KW_MUL < KW_AMPERSANT).
    Conflict between rule 96 and token EQUAL resolved as shift (KW_MUL < EQUAL).


State 154

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   98     | expr KW_DIV expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, CLOSE_PAR]
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 98 (expr)

    Conflict between rule 98 and token KW_PLUS resolved as reduce (KW_PLUS < KW_DIV).
    Conflict between rule 98 and token KW_SUB resolved as reduce (KW_SUB < KW_DIV).
    Conflict between rule 98 and token KW_MUL resolved as reduce (KW_MUL < KW_DIV).
    Conflict between rule 98 and token KW_DIV resolved as reduce (%left KW_DIV).
    Conflict between rule 98 and token KW_MOD resolved as shift (KW_DIV < KW_MOD).
    Conflict between rule 98 and token KW_GREATEREQUAL resolved as shift (KW_DIV < KW_GREATEREQUAL).
    Conflict between rule 98 and token KW_LESSEQUAL resolved as shift (KW_DIV < KW_LESSEQUAL).
    Conflict between rule 98 and token KW_GREATHAN resolved as shift (KW_DIV < KW_GREATHAN).
    Conflict between rule 98 and token KW_LESSTHAN resolved as shift (KW_DIV < KW_LESSTHAN).
    Conflict between rule 98 and token KW_INEQ resolved as shift (KW_DIV < KW_INEQ).
    Conflict between rule 98 and token KW_AND resolved as shift (KW_DIV < KW_AND).
    Conflict between rule 98 and token KW_AMPERSANT resolved as shift (KW_DIV < KW_AMPERSANT).
    Conflict between rule 98 and token EQUAL resolved as shift (KW_DIV < EQUAL).


State 155

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   97     | expr KW_MOD expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, CLOSE_PAR]
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 97 (expr)

    Conflict between rule 97 and token KW_PLUS resolved as reduce (KW_PLUS < KW_MOD).
    Conflict between rule 97 and token KW_SUB resolved as reduce (KW_SUB < KW_MOD).
    Conflict between rule 97 and token KW_MUL resolved as reduce (KW_MUL < KW_MOD).
    Conflict between rule 97 and token KW_DIV resolved as reduce (KW_DIV < KW_MOD).
    Conflict between rule 97 and token KW_MOD resolved as reduce (%left KW_MOD).
    Conflict between rule 97 and token KW_GREATEREQUAL resolved as shift (KW_MOD < KW_GREATEREQUAL).
    Conflict between rule 97 and token KW_LESSEQUAL resolved as shift (KW_MOD < KW_LESSEQUAL).
    Conflict between rule 97 and token KW_GREATHAN resolved as shift (KW_MOD < KW_GREATHAN).
    Conflict between rule 97 and token KW_LESSTHAN resolved as shift (KW_MOD < KW_LESSTHAN).
    Conflict between rule 97 and token KW_INEQ resolved as shift (KW_MOD < KW_INEQ).
    Conflict between rule 97 and token KW_AND resolved as shift (KW_MOD < KW_AND).
    Conflict between rule 97 and token KW_AMPERSANT resolved as shift (KW_MOD < KW_AMPERSANT).
    Conflict between rule 97 and token EQUAL resolved as shift (KW_MOD < EQUAL).


State 156

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  103     | expr KW_GREATEREQUAL expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, CLOSE_PAR]
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_LESSEQUAL  shift, and go to state 97
    KW_GREATHAN   shift, and go to state 98
    KW_LESSTHAN   shift, and go to state 99
    KW_INEQ       shift, and go to state 100
    KW_AND        shift, and go to state 101
    KW_AMPERSANT  shift, and go to state 102
    EQUAL         shift, and go to state 103

    $default  reduce using rule 103 (expr)

    Conflict between rule 103 and token KW_PLUS resolved as reduce (KW_PLUS < KW_GREATEREQUAL).
    Conflict between rule 103 and token KW_SUB resolved as reduce (KW_SUB < KW_GREATEREQUAL).
    Conflict between rule 103 and token KW_MUL resolved as reduce (KW_MUL < KW_GREATEREQUAL).
    Conflict between rule 103 and token KW_DIV resolved as reduce (KW_DIV < KW_GREATEREQUAL).
    Conflict between rule 103 and token KW_MOD resolved as reduce (KW_MOD < KW_GREATEREQUAL).
    Conflict between rule 103 and token KW_GREATEREQUAL resolved as reduce (%left KW_GREATEREQUAL).
    Conflict between rule 103 and token KW_LESSEQUAL resolved as shift (KW_GREATEREQUAL < KW_LESSEQUAL).
    Conflict between rule 103 and token KW_GREATHAN resolved as shift (KW_GREATEREQUAL < KW_GREATHAN).
    Conflict between rule 103 and token KW_LESSTHAN resolved as shift (KW_GREATEREQUAL < KW_LESSTHAN).
    Conflict between rule 103 and token KW_INEQ resolved as shift (KW_GREATEREQUAL < KW_INEQ).
    Conflict between rule 103 and token KW_AND resolved as shift (KW_GREATEREQUAL < KW_AND).
    Conflict between rule 103 and token KW_AMPERSANT resolved as shift (KW_GREATEREQUAL < KW_AMPERSANT).
    Conflict between rule 103 and token EQUAL resolved as shift (KW_GREATEREQUAL < EQUAL).


State 157

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  102     | expr KW_LESSEQUAL expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, CLOSE_PAR]
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_GREATHAN   shift, and go to state 98
    KW_LESSTHAN   shift, and go to state 99
    KW_INEQ       shift, and go to state 100
    KW_AND        shift, and go to state 101
    KW_AMPERSANT  shift, and go to state 102
    EQUAL         shift, and go to state 103

    $default  reduce using rule 102 (expr)

    Conflict between rule 102 and token KW_PLUS resolved as reduce (KW_PLUS < KW_LESSEQUAL).
    Conflict between rule 102 and token KW_SUB resolved as reduce (KW_SUB < KW_LESSEQUAL).
    Conflict between rule 102 and token KW_MUL resolved as reduce (KW_MUL < KW_LESSEQUAL).
    Conflict between rule 102 and token KW_DIV resolved as reduce (KW_DIV < KW_LESSEQUAL).
    Conflict between rule 102 and token KW_MOD resolved as reduce (KW_MOD < KW_LESSEQUAL).
    Conflict between rule 102 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_LESSEQUAL).
    Conflict between rule 102 and token KW_LESSEQUAL resolved as reduce (%left KW_LESSEQUAL).
    Conflict between rule 102 and token KW_GREATHAN resolved as shift (KW_LESSEQUAL < KW_GREATHAN).
    Conflict between rule 102 and token KW_LESSTHAN resolved as shift (KW_LESSEQUAL < KW_LESSTHAN).
    Conflict between rule 102 and token KW_INEQ resolved as shift (KW_LESSEQUAL < KW_INEQ).
    Conflict between rule 102 and token KW_AND resolved as shift (KW_LESSEQUAL < KW_AND).
    Conflict between rule 102 and token KW_AMPERSANT resolved as shift (KW_LESSEQUAL < KW_AMPERSANT).
    Conflict between rule 102 and token EQUAL resolved as shift (KW_LESSEQUAL < EQUAL).


State 158

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  101     | expr KW_GREATHAN expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, CLOSE_PAR]
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_LESSTHAN   shift, and go to state 99
    KW_INEQ       shift, and go to state 100
    KW_AND        shift, and go to state 101
    KW_AMPERSANT  shift, and go to state 102
    EQUAL         shift, and go to state 103

    $default  reduce using rule 101 (expr)

    Conflict between rule 101 and token KW_PLUS resolved as reduce (KW_PLUS < KW_GREATHAN).
    Conflict between rule 101 and token KW_SUB resolved as reduce (KW_SUB < KW_GREATHAN).
    Conflict between rule 101 and token KW_MUL resolved as reduce (KW_MUL < KW_GREATHAN).
    Conflict between rule 101 and token KW_DIV resolved as reduce (KW_DIV < KW_GREATHAN).
    Conflict between rule 101 and token KW_MOD resolved as reduce (KW_MOD < KW_GREATHAN).
    Conflict between rule 101 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_GREATHAN).
    Conflict between rule 101 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < KW_GREATHAN).
    Conflict between rule 101 and token KW_GREATHAN resolved as reduce (%left KW_GREATHAN).
    Conflict between rule 101 and token KW_LESSTHAN resolved as shift (KW_GREATHAN < KW_LESSTHAN).
    Conflict between rule 101 and token KW_INEQ resolved as shift (KW_GREATHAN < KW_INEQ).
    Conflict between rule 101 and token KW_AND resolved as shift (KW_GREATHAN < KW_AND).
    Conflict between rule 101 and token KW_AMPERSANT resolved as shift (KW_GREATHAN < KW_AMPERSANT).
    Conflict between rule 101 and token EQUAL resolved as shift (KW_GREATHAN < EQUAL).


State 159

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  100     | expr KW_LESSTHAN expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, CLOSE_PAR]
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_INEQ       shift, and go to state 100
    KW_AND        shift, and go to state 101
    KW_AMPERSANT  shift, and go to state 102
    EQUAL         shift, and go to state 103

    $default  reduce using rule 100 (expr)

    Conflict between rule 100 and token KW_PLUS resolved as reduce (KW_PLUS < KW_LESSTHAN).
    Conflict between rule 100 and token KW_SUB resolved as reduce (KW_SUB < KW_LESSTHAN).
    Conflict between rule 100 and token KW_MUL resolved as reduce (KW_MUL < KW_LESSTHAN).
    Conflict between rule 100 and token KW_DIV resolved as reduce (KW_DIV < KW_LESSTHAN).
    Conflict between rule 100 and token KW_MOD resolved as reduce (KW_MOD < KW_LESSTHAN).
    Conflict between rule 100 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_LESSTHAN).
    Conflict between rule 100 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < KW_LESSTHAN).
    Conflict between rule 100 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < KW_LESSTHAN).
    Conflict between rule 100 and token KW_LESSTHAN resolved as reduce (%left KW_LESSTHAN).
    Conflict between rule 100 and token KW_INEQ resolved as shift (KW_LESSTHAN < KW_INEQ).
    Conflict between rule 100 and token KW_AND resolved as shift (KW_LESSTHAN < KW_AND).
    Conflict between rule 100 and token KW_AMPERSANT resolved as shift (KW_LESSTHAN < KW_AMPERSANT).
    Conflict between rule 100 and token EQUAL resolved as shift (KW_LESSTHAN < EQUAL).


State 160

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  104     | expr KW_INEQ expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, CLOSE_PAR]
  105     | expr . KW_AMPERSANT expr

    KW_AND        shift, and go to state 101
    KW_AMPERSANT  shift, and go to state 102
    EQUAL         shift, and go to state 103

    $default  reduce using rule 104 (expr)

    Conflict between rule 104 and token KW_PLUS resolved as reduce (KW_PLUS < KW_INEQ).
    Conflict between rule 104 and token KW_SUB resolved as reduce (KW_SUB < KW_INEQ).
    Conflict between rule 104 and token KW_MUL resolved as reduce (KW_MUL < KW_INEQ).
    Conflict between rule 104 and token KW_DIV resolved as reduce (KW_DIV < KW_INEQ).
    Conflict between rule 104 and token KW_MOD resolved as reduce (KW_MOD < KW_INEQ).
    Conflict between rule 104 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_INEQ).
    Conflict between rule 104 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < KW_INEQ).
    Conflict between rule 104 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < KW_INEQ).
    Conflict between rule 104 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < KW_INEQ).
    Conflict between rule 104 and token KW_INEQ resolved as reduce (%left KW_INEQ).
    Conflict between rule 104 and token KW_AND resolved as shift (KW_INEQ < KW_AND).
    Conflict between rule 104 and token KW_AMPERSANT resolved as shift (KW_INEQ < KW_AMPERSANT).
    Conflict between rule 104 and token EQUAL resolved as shift (KW_INEQ < EQUAL).


State 161

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   95     | expr KW_AND expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, CLOSE_PAR]
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_AMPERSANT  shift, and go to state 102
    EQUAL         shift, and go to state 103

    $default  reduce using rule 95 (expr)

    Conflict between rule 95 and token KW_PLUS resolved as reduce (KW_PLUS < KW_AND).
    Conflict between rule 95 and token KW_SUB resolved as reduce (KW_SUB < KW_AND).
    Conflict between rule 95 and token KW_MUL resolved as reduce (KW_MUL < KW_AND).
    Conflict between rule 95 and token KW_DIV resolved as reduce (KW_DIV < KW_AND).
    Conflict between rule 95 and token KW_MOD resolved as reduce (KW_MOD < KW_AND).
    Conflict between rule 95 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_AND).
    Conflict between rule 95 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < KW_AND).
    Conflict between rule 95 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < KW_AND).
    Conflict between rule 95 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < KW_AND).
    Conflict between rule 95 and token KW_INEQ resolved as reduce (KW_INEQ < KW_AND).
    Conflict between rule 95 and token KW_AND resolved as reduce (%left KW_AND).
    Conflict between rule 95 and token KW_AMPERSANT resolved as shift (KW_AND < KW_AMPERSANT).
    Conflict between rule 95 and token EQUAL resolved as shift (KW_AND < EQUAL).


State 162

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr
  105     | expr KW_AMPERSANT expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, CLOSE_PAR]

    EQUAL  shift, and go to state 103

    $default  reduce using rule 105 (expr)

    Conflict between rule 105 and token KW_PLUS resolved as reduce (KW_PLUS < KW_AMPERSANT).
    Conflict between rule 105 and token KW_SUB resolved as reduce (KW_SUB < KW_AMPERSANT).
    Conflict between rule 105 and token KW_MUL resolved as reduce (KW_MUL < KW_AMPERSANT).
    Conflict between rule 105 and token KW_DIV resolved as reduce (KW_DIV < KW_AMPERSANT).
    Conflict between rule 105 and token KW_MOD resolved as reduce (KW_MOD < KW_AMPERSANT).
    Conflict between rule 105 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < KW_AMPERSANT).
    Conflict between rule 105 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < KW_AMPERSANT).
    Conflict between rule 105 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < KW_AMPERSANT).
    Conflict between rule 105 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < KW_AMPERSANT).
    Conflict between rule 105 and token KW_INEQ resolved as reduce (KW_INEQ < KW_AMPERSANT).
    Conflict between rule 105 and token KW_AND resolved as reduce (KW_AND < KW_AMPERSANT).
    Conflict between rule 105 and token KW_AMPERSANT resolved as reduce (%left KW_AMPERSANT).
    Conflict between rule 105 and token EQUAL resolved as shift (KW_AMPERSANT < EQUAL).


State 163

   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
   99     | expr EQUAL expr .  [KW_SEMICLN, COMMA, CLOSE_HK, IDENTIFIERS, KW_PLUS, KW_SUB, KW_MUL, KW_DIV, KW_MOD, KW_GREATEREQUAL, KW_LESSEQUAL, KW_GREATHAN, KW_LESSTHAN, KW_INEQ, KW_AND, KW_AMPERSANT, EQUAL, CLOSE_PAR]
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    $default  reduce using rule 99 (expr)

    Conflict between rule 99 and token KW_PLUS resolved as reduce (KW_PLUS < EQUAL).
    Conflict between rule 99 and token KW_SUB resolved as reduce (KW_SUB < EQUAL).
    Conflict between rule 99 and token KW_MUL resolved as reduce (KW_MUL < EQUAL).
    Conflict between rule 99 and token KW_DIV resolved as reduce (KW_DIV < EQUAL).
    Conflict between rule 99 and token KW_MOD resolved as reduce (KW_MOD < EQUAL).
    Conflict between rule 99 and token KW_GREATEREQUAL resolved as reduce (KW_GREATEREQUAL < EQUAL).
    Conflict between rule 99 and token KW_LESSEQUAL resolved as reduce (KW_LESSEQUAL < EQUAL).
    Conflict between rule 99 and token KW_GREATHAN resolved as reduce (KW_GREATHAN < EQUAL).
    Conflict between rule 99 and token KW_LESSTHAN resolved as reduce (KW_LESSTHAN < EQUAL).
    Conflict between rule 99 and token KW_INEQ resolved as reduce (KW_INEQ < EQUAL).
    Conflict between rule 99 and token KW_AND resolved as reduce (KW_AND < EQUAL).
    Conflict between rule 99 and token KW_AMPERSANT resolved as reduce (KW_AMPERSANT < EQUAL).
    Conflict between rule 99 and token EQUAL resolved as reduce (%left EQUAL).


State 164

    9 functions_declaration: type IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN code . KW_END
   11 code: code . instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_END       shift, and go to state 193
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    instr                go to state 142
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 165

   56 function_parameters: function_parameters COMMA type . IDENTIFIERS

    IDENTIFIERS  shift, and go to state 194


State 166

    8 functions_declaration: type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN . code KW_END
   10 code: . instr
   11     | . code instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    code                 go to state 195
    instr                go to state 69
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 167

   68 Declare_Arrays: Declare_Arrays OPEN_HK expr CLOSE_HK .

    $default  reduce using rule 68 (Declare_Arrays)


State 168

   34 simple_instructions: KW_RETURN expr . erotimatiko
   78 erotimatiko: . KW_SEMICLN
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_SEMICLN       shift, and go to state 32
    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    erotimatiko  go to state 196


State 169

   36 simple_instructions: KW_BREAK erotimatiko .

    $default  reduce using rule 36 (simple_instructions)


State 170

   35 simple_instructions: KW_CONT erotimatiko .

    $default  reduce using rule 35 (simple_instructions)


State 171

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   37 simple_instructions: KW_BEGIN ci . KW_END
   40 ci: ci . complex_instractions
   41 complex_instractions: . cmd
   42                     | . assign_cmd erotimatiko
   43                     | . KW_RETURN expr erotimatiko
   44                     | . erotimatiko
   45                     | . declarations
   46                     | . KW_CONT erotimatiko
   47                     | . KW_BREAK erotimatiko
   48                     | . KW_BEGIN complex_instractions KW_END
   49                     | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 128
    KW_BREAK     shift, and go to state 129
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 130
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_END       shift, and go to state 197
    KW_BEGIN     shift, and go to state 131
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                   go to state 132
    do_stmt               go to state 71
    while_stmt            go to state 72
    for_stmt              go to state 73
    if_stmt               go to state 74
    complex_instractions  go to state 184
    call_function         go to state 135
    assign_cmd            go to state 136
    declarations          go to state 137
    Declare_Arrays_expr   go to state 51
    type_of_values        go to state 78
    type                  go to state 79
    erotimatiko           go to state 138
    expr                  go to state 81


State 172

   25 do_stmt: KW_DO simple_instructions KW_WHILE . OPEN_PAR expr CLOSE_PAR erotimatiko

    OPEN_PAR  shift, and go to state 198


State 173

   38 simple_instructions: call_function erotimatiko .

    $default  reduce using rule 38 (simple_instructions)


State 174

   31 simple_instructions: assign_cmd erotimatiko .

    $default  reduce using rule 31 (simple_instructions)


State 175

   28 if_stmt: KW_IF OPEN_PAR expr . CLOSE_PAR simple_instructions
   29        | KW_IF OPEN_PAR expr . CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103
    CLOSE_PAR        shift, and go to state 199


State 176

   15 instr: KW_RETURN expr erotimatiko .

    $default  reduce using rule 15 (instr)


State 177

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd . erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 200


State 178

   26 while_stmt: KW_WHILE OPEN_PAR expr . CLOSE_PAR simple_instructions
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103
    CLOSE_PAR        shift, and go to state 201


State 179

   43 complex_instractions: KW_RETURN expr . erotimatiko
   78 erotimatiko: . KW_SEMICLN
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_SEMICLN       shift, and go to state 32
    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    erotimatiko  go to state 202


State 180

   47 complex_instractions: KW_BREAK erotimatiko .

    $default  reduce using rule 47 (complex_instractions)


State 181

   46 complex_instractions: KW_CONT erotimatiko .

    $default  reduce using rule 46 (complex_instractions)


State 182

   48 complex_instractions: KW_BEGIN complex_instractions . KW_END

    KW_END  shift, and go to state 203


State 183

   18 instr: KW_BEGIN ci KW_END .

    $default  reduce using rule 18 (instr)


State 184

   40 ci: ci complex_instractions .

    $default  reduce using rule 40 (ci)


State 185

   49 complex_instractions: call_function erotimatiko .

    $default  reduce using rule 49 (complex_instractions)


State 186

   42 complex_instractions: assign_cmd erotimatiko .

    $default  reduce using rule 42 (complex_instractions)


State 187

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: IDENTIFIERS CLN EQUAL . expr
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 204


State 188

   54 assign_cmd: IDENTIFIERS Declare_Arrays CLN . EQUAL expr

    EQUAL  shift, and go to state 205


State 189

   53 assign_cmd: type_of_values IDENTIFIERS CLN . EQUAL expr

    EQUAL  shift, and go to state 206


State 190

    6 header_jobs: header programm KW_MAIN OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END .

    $default  reduce using rule 6 (header_jobs)


State 191

   58 call_function_parameters: call_function_parameters COMMA . IDENTIFIERS

    IDENTIFIERS  shift, and go to state 207


State 192

   50 call_function: IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR .

    $default  reduce using rule 50 (call_function)


State 193

    9 functions_declaration: type IDENTIFIERS OPEN_PAR CLOSE_PAR KW_BEGIN code KW_END .

    $default  reduce using rule 9 (functions_declaration)


State 194

   56 function_parameters: function_parameters COMMA type IDENTIFIERS .

    $default  reduce using rule 56 (function_parameters)


State 195

    8 functions_declaration: type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code . KW_END
   11 code: code . instr
   12 instr: . assign_cmd erotimatiko
   13      | . erotimatiko
   14      | . declarations
   15      | . KW_RETURN expr erotimatiko
   16      | . KW_CONT erotimatiko
   17      | . KW_BREAK erotimatiko
   18      | . KW_BEGIN ci KW_END
   19      | . call_function erotimatiko
   20      | . cmd
   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 61
    KW_BREAK     shift, and go to state 62
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 63
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_END       shift, and go to state 208
    KW_BEGIN     shift, and go to state 66
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    instr                go to state 142
    cmd                  go to state 70
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    call_function        go to state 75
    assign_cmd           go to state 76
    declarations         go to state 77
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 80
    expr                 go to state 81


State 196

   34 simple_instructions: KW_RETURN expr erotimatiko .

    $default  reduce using rule 34 (simple_instructions)


State 197

   37 simple_instructions: KW_BEGIN ci KW_END .

    $default  reduce using rule 37 (simple_instructions)


State 198

   25 do_stmt: KW_DO simple_instructions KW_WHILE OPEN_PAR . expr CLOSE_PAR erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 209


State 199

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   28        | KW_IF OPEN_PAR expr CLOSE_PAR . simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   29        | KW_IF OPEN_PAR expr CLOSE_PAR . simple_instructions KW_ELSE simple_instructions
   30 simple_instructions: . cmd
   31                    | . assign_cmd erotimatiko
   32                    | . erotimatiko
   33                    | . declarations
   34                    | . KW_RETURN expr erotimatiko
   35                    | . KW_CONT erotimatiko
   36                    | . KW_BREAK erotimatiko
   37                    | . KW_BEGIN ci KW_END
   38                    | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 112
    KW_BREAK     shift, and go to state 113
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 114
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 115
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                  go to state 116
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    simple_instructions  go to state 210
    call_function        go to state 118
    assign_cmd           go to state 119
    declarations         go to state 120
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 121
    expr                 go to state 81


State 200

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd erotimatiko . expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 211


State 201

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   26           | KW_WHILE OPEN_PAR expr CLOSE_PAR . simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   30 simple_instructions: . cmd
   31                    | . assign_cmd erotimatiko
   32                    | . erotimatiko
   33                    | . declarations
   34                    | . KW_RETURN expr erotimatiko
   35                    | . KW_CONT erotimatiko
   36                    | . KW_BREAK erotimatiko
   37                    | . KW_BEGIN ci KW_END
   38                    | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 112
    KW_BREAK     shift, and go to state 113
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 114
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 115
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                  go to state 116
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    simple_instructions  go to state 212
    call_function        go to state 118
    assign_cmd           go to state 119
    declarations         go to state 120
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 121
    expr                 go to state 81


State 202

   43 complex_instractions: KW_RETURN expr erotimatiko .

    $default  reduce using rule 43 (complex_instractions)


State 203

   48 complex_instractions: KW_BEGIN complex_instractions KW_END .

    $default  reduce using rule 48 (complex_instractions)


State 204

   52 assign_cmd: IDENTIFIERS CLN EQUAL expr .  [KW_SEMICLN, CLOSE_PAR]
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 52 (assign_cmd)


State 205

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   54 assign_cmd: IDENTIFIERS Declare_Arrays CLN EQUAL . expr
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 213


State 206

   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   53 assign_cmd: type_of_values IDENTIFIERS CLN EQUAL . expr
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 42
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    Declare_Arrays_expr  go to state 51
    expr                 go to state 214


State 207

   58 call_function_parameters: call_function_parameters COMMA IDENTIFIERS .

    $default  reduce using rule 58 (call_function_parameters)


State 208

    8 functions_declaration: type IDENTIFIERS OPEN_PAR function_parameters CLOSE_PAR KW_BEGIN code KW_END .

    $default  reduce using rule 8 (functions_declaration)


State 209

   25 do_stmt: KW_DO simple_instructions KW_WHILE OPEN_PAR expr . CLOSE_PAR erotimatiko
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103
    CLOSE_PAR        shift, and go to state 215


State 210

   28 if_stmt: KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions .  [KW_TRUE, KW_FALSE, KW_STATIC, KW_DO, KW_IF, KW_RETURN, KW_BREAK, KW_INTEGER, KW_STRING, KW_CONT, KW_FOR, KW_CHAR, KW_VOID, KW_REAL, KW_WHILE, KW_END, KW_BEGIN, KW_SEMICLN, STRINGS, CHARACTER, IDENTIFIERS, INTEGERS, FLOATS, KW_PLUS, KW_SUB, KW_NOT, KW_NOTNOT, KW_BOOLEAN, OPEN_PAR]
   29        | KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions . KW_ELSE simple_instructions

    KW_ELSE  shift, and go to state 216

    $default  reduce using rule 28 (if_stmt)

    Conflict between rule 28 and token KW_ELSE resolved as shift ("then" < KW_ELSE).


State 211

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd erotimatiko expr . erotimatiko assign_cmd CLOSE_PAR simple_instructions
   78 erotimatiko: . KW_SEMICLN
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_SEMICLN       shift, and go to state 32
    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    erotimatiko  go to state 217


State 212

   26 while_stmt: KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions .

    $default  reduce using rule 26 (while_stmt)


State 213

   54 assign_cmd: IDENTIFIERS Declare_Arrays CLN EQUAL expr .  [KW_SEMICLN, CLOSE_PAR]
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 54 (assign_cmd)


State 214

   53 assign_cmd: type_of_values IDENTIFIERS CLN EQUAL expr .  [KW_SEMICLN, CLOSE_PAR]
   89 expr: expr . KW_PLUS expr
   94     | expr . KW_SUB expr
   95     | expr . KW_AND expr
   96     | expr . KW_MUL expr
   97     | expr . KW_MOD expr
   98     | expr . KW_DIV expr
   99     | expr . EQUAL expr
  100     | expr . KW_LESSTHAN expr
  101     | expr . KW_GREATHAN expr
  102     | expr . KW_LESSEQUAL expr
  103     | expr . KW_GREATEREQUAL expr
  104     | expr . KW_INEQ expr
  105     | expr . KW_AMPERSANT expr

    KW_PLUS          shift, and go to state 91
    KW_SUB           shift, and go to state 92
    KW_MUL           shift, and go to state 93
    KW_DIV           shift, and go to state 94
    KW_MOD           shift, and go to state 95
    KW_GREATEREQUAL  shift, and go to state 96
    KW_LESSEQUAL     shift, and go to state 97
    KW_GREATHAN      shift, and go to state 98
    KW_LESSTHAN      shift, and go to state 99
    KW_INEQ          shift, and go to state 100
    KW_AND           shift, and go to state 101
    KW_AMPERSANT     shift, and go to state 102
    EQUAL            shift, and go to state 103

    $default  reduce using rule 53 (assign_cmd)


State 215

   25 do_stmt: KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR . erotimatiko
   78 erotimatiko: . KW_SEMICLN

    KW_SEMICLN  shift, and go to state 32

    erotimatiko  go to state 218


State 216

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   29        | KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE . simple_instructions
   30 simple_instructions: . cmd
   31                    | . assign_cmd erotimatiko
   32                    | . erotimatiko
   33                    | . declarations
   34                    | . KW_RETURN expr erotimatiko
   35                    | . KW_CONT erotimatiko
   36                    | . KW_BREAK erotimatiko
   37                    | . KW_BEGIN ci KW_END
   38                    | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 112
    KW_BREAK     shift, and go to state 113
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 114
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 115
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                  go to state 116
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    simple_instructions  go to state 219
    call_function        go to state 118
    assign_cmd           go to state 119
    declarations         go to state 120
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 121
    expr                 go to state 81


State 217

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko . assign_cmd CLOSE_PAR simple_instructions
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    OPEN_PAR     shift, and go to state 49

    call_function        go to state 50
    assign_cmd           go to state 220
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    expr                 go to state 81


State 218

   25 do_stmt: KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko .

    $default  reduce using rule 25 (do_stmt)


State 219

   29 if_stmt: KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions .

    $default  reduce using rule 29 (if_stmt)


State 220

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd . CLOSE_PAR simple_instructions

    CLOSE_PAR  shift, and go to state 221


State 221

   21 cmd: . if_stmt
   22    | . for_stmt
   23    | . while_stmt
   24    | . do_stmt
   25 do_stmt: . KW_DO simple_instructions KW_WHILE OPEN_PAR expr CLOSE_PAR erotimatiko
   26 while_stmt: . KW_WHILE OPEN_PAR expr CLOSE_PAR simple_instructions
   27 for_stmt: . KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions
   27         | KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR . simple_instructions
   28 if_stmt: . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions
   29        | . KW_IF OPEN_PAR expr CLOSE_PAR simple_instructions KW_ELSE simple_instructions
   30 simple_instructions: . cmd
   31                    | . assign_cmd erotimatiko
   32                    | . erotimatiko
   33                    | . declarations
   34                    | . KW_RETURN expr erotimatiko
   35                    | . KW_CONT erotimatiko
   36                    | . KW_BREAK erotimatiko
   37                    | . KW_BEGIN ci KW_END
   38                    | . call_function erotimatiko
   50 call_function: . IDENTIFIERS OPEN_PAR call_function_parameters CLOSE_PAR
   51              | . IDENTIFIERS OPEN_PAR CLOSE_PAR
   52 assign_cmd: . IDENTIFIERS CLN EQUAL expr
   53           | . type_of_values IDENTIFIERS CLN EQUAL expr
   54           | . IDENTIFIERS Declare_Arrays CLN EQUAL expr
   59 declarations: . type list_var erotimatiko
   60             | . KW_STATIC type list_var erotimatiko
   69 Declare_Arrays_expr: . IDENTIFIERS Declare_Arrays
   71 type_of_values: . expr
   72 type: . KW_INTEGER
   73     | . KW_BOOLEAN
   74     | . KW_CHAR
   75     | . KW_REAL
   76     | . KW_STRING
   77     | . KW_VOID
   78 erotimatiko: . KW_SEMICLN
   79 expr: . INTEGERS
   80     | . FLOATS
   81     | . STRINGS
   82     | . CHARACTER
   83     | . IDENTIFIERS
   84     | . KW_TRUE
   85     | . KW_FALSE
   86     | . call_function
   87     | . Declare_Arrays_expr
   88     | . OPEN_PAR expr CLOSE_PAR
   89     | . expr KW_PLUS expr
   90     | . KW_NOT expr
   91     | . KW_NOTNOT expr
   92     | . KW_SUB expr
   93     | . KW_PLUS expr
   94     | . expr KW_SUB expr
   95     | . expr KW_AND expr
   96     | . expr KW_MUL expr
   97     | . expr KW_MOD expr
   98     | . expr KW_DIV expr
   99     | . expr EQUAL expr
  100     | . expr KW_LESSTHAN expr
  101     | . expr KW_GREATHAN expr
  102     | . expr KW_LESSEQUAL expr
  103     | . expr KW_GREATEREQUAL expr
  104     | . expr KW_INEQ expr
  105     | . expr KW_AMPERSANT expr

    KW_TRUE      shift, and go to state 38
    KW_FALSE     shift, and go to state 39
    KW_STATIC    shift, and go to state 3
    KW_DO        shift, and go to state 59
    KW_IF        shift, and go to state 60
    KW_RETURN    shift, and go to state 112
    KW_BREAK     shift, and go to state 113
    KW_INTEGER   shift, and go to state 4
    KW_STRING    shift, and go to state 5
    KW_CONT      shift, and go to state 114
    KW_FOR       shift, and go to state 64
    KW_CHAR      shift, and go to state 6
    KW_VOID      shift, and go to state 7
    KW_REAL      shift, and go to state 8
    KW_WHILE     shift, and go to state 65
    KW_BEGIN     shift, and go to state 115
    KW_SEMICLN   shift, and go to state 32
    STRINGS      shift, and go to state 40
    CHARACTER    shift, and go to state 41
    IDENTIFIERS  shift, and go to state 67
    INTEGERS     shift, and go to state 43
    FLOATS       shift, and go to state 44
    KW_PLUS      shift, and go to state 45
    KW_SUB       shift, and go to state 46
    KW_NOT       shift, and go to state 47
    KW_NOTNOT    shift, and go to state 48
    KW_BOOLEAN   shift, and go to state 10
    OPEN_PAR     shift, and go to state 49

    cmd                  go to state 116
    do_stmt              go to state 71
    while_stmt           go to state 72
    for_stmt             go to state 73
    if_stmt              go to state 74
    simple_instructions  go to state 222
    call_function        go to state 118
    assign_cmd           go to state 119
    declarations         go to state 120
    Declare_Arrays_expr  go to state 51
    type_of_values       go to state 78
    type                 go to state 79
    erotimatiko          go to state 121
    expr                 go to state 81


State 222

   27 for_stmt: KW_FOR OPEN_PAR assign_cmd erotimatiko expr erotimatiko assign_cmd CLOSE_PAR simple_instructions .

    $default  reduce using rule 27 (for_stmt)
